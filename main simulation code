import math
import matplotlib.pyplot as plt
import numpy as np

# Constants
gravity = 9.81  # Acceleration due to gravity (m/s^2)
fuel_burning_rate = 5.0  # Rate of fuel consumption (kg/s)
initial_distance = 0.0  # Initial distance from the missile (m)
initial_velocity = 0.0  # Initial velocity (m/s)
launch_angle = 45.0  # Launch angle (degrees)

# Payload
payload_radioactivity = 1000.0  # Amount of radioactive material (kg)
payload_decay_constant = 0.1  # Decay constant (1/s)

# Define the speed of light (m/s)
speed_of_light = 299792458.0

# Constants for Gaussian plume model
wind_speed = 5.0  # m/s
vertical_dispersion = 100.0  # m
horizontal_dispersion = 100.0  # m

# Create an array to represent the distance levels up to 20 km
distance_levels = np.arange(0, 20001, 100)  # Distance levels from 0 m to 20,000 m (100 m intervals)
absorbed_dose_levels = np.zeros(len(distance_levels))

# Function to calculate missile position, velocity, remaining fuel, acceleration, estimated impact time, and radioactivity
def misi_simulation(time, fuel, radioactive_material, distance):
    if fuel > 0:
        # Calculate fuel consumption and remaining fuel
        fuel_consumed = fuel_burning_rate * time
        remaining_fuel = fuel - fuel_consumed

        # Calculate acceleration due to thrust
        acceleration = fuel_burning_rate * gravity

        # Calculate velocity components
        velocity_x = initial_velocity * math.cos(math.radians(launch_angle))
        velocity_y = initial_velocity * math.sin(math.radians(launch_angle))

        # Calculate velocity and distance
        velocity = math.sqrt(velocity_x**2 + velocity_y**2) + acceleration * time
        distance = initial_distance + (velocity_x * time)
    else:
        # Missile is in free fall with no thrust
        remaining_fuel = 0
        velocity = math.sqrt(initial_velocity**2 - 2 * gravity * initial_distance)
        distance = initial_distance + initial_velocity * time - 0.5 * gravity * time**2
        acceleration = -gravity

    # Calculate estimated impact time (assuming the missile will hit the ground)
    estimated_impact_time = (-velocity - math.sqrt(velocity**2 - 2 * gravity * distance)) / (-gravity)

    # Calculate radioactivity over time (radioactive decay)
    remaining_radioactivity = radioactive_material * math.exp(-payload_decay_constant * time)

    # Calculate energy released using E=mc^2
    energy_released = remaining_radioactivity * (speed_of_light**2)

    return velocity, distance, remaining_fuel, acceleration, estimated_impact_time, remaining_radioactivity, energy_released

# Main simulation loop
total_time = 30.0  # Total simulation time (seconds)
time_step = 0.1  # Time step for simulation (seconds)
current_time = 0.0
initial_fuel_load = 100.0  # Initial fuel load (kg)
remaining_fuel = initial_fuel_load
initial_distance = 0.0  # Initial distance from the missile (m)

# Lists to store trajectory data
trajectory_x = []
trajectory_y = []
radioactivity_data = []

while current_time <= total_time:
    velocity, distance, remaining_fuel, acceleration, estimated_impact_time, remaining_radioactivity, energy_released = misi_simulation(current_time, remaining_fuel, payload_radioactivity, initial_distance)
    trajectory_x.append(current_time)
    trajectory_y.append(distance)
    radioactivity_data.append(remaining_radioactivity)

    for i, distance_level in enumerate(distance_levels):
        if distance <= distance_level:
            concentration = (energy_released / (2 * math.pi * wind_speed * vertical_dispersion * horizontal_dispersion)) \
                            * math.exp(-0.5 * ((distance_level-distance) / horizontal_dispersion)**2)
            absorbed_dose_levels[i] += concentration * time_step

    current_time += time_step

# Plot the trajectory and radioactivity decay
plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.plot(trajectory_x, trajectory_y)
plt.title("Missile Trajectory")
plt.xlabel("Time (s)")
plt.ylabel("Distance (m)")
plt.grid(True)

plt.subplot(1,2,2)
plt.plot(trajectory_x, radioactivity_data)
plt.title("Radioactivity Decay")
plt.xlabel("Time (s)")
plt.ylabel("Remaining Radioactivity (kg)")
plt.grid(True)

# Plot the absorbed dose vs. distance
plt.figure(figsize=(8,6))
plt.plot(distance_levels, absorbed_dose_levels)
plt.title("Absorbed Dose vs. Distance")
plt.xlabel("Distance (m)")
plt.ylabel("Absorbed Dose (J/m^2)")
plt.grid(True)
plt.show()

